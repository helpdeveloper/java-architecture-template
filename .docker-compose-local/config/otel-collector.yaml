# Configuration file for OpenTelemetry Collector.
# This file defines receivers, exporters, processors, and service pipelines for telemetry data collection and processing.

receivers:
  # Receivers collect telemetry data from applications or other sources.

  otlp:  # OpenTelemetry Protocol receiver.
    protocols:
      http:
        endpoint: 0.0.0.0:4318  # HTTP endpoint for receiving telemetry data.
      grpc:
        endpoint: 0.0.0.0:4317  # gRPC endpoint for receiving telemetry data.

  prometheus:  # Prometheus receiver to scrape metrics from endpoints.
    config:
      scrape_configs:
        - job_name: otelcol-metrics
          scrape_interval: 60s  # Frequency for scraping metrics.
          static_configs:
            - targets: ["otel-collector:8888"]  # Target endpoint for metrics scraping.
        - job_name: spanmetrics
          scrape_interval: 60s  # Frequency for scraping span metrics.
          static_configs:
            - targets: ["otel-collector:9999"]  # Target endpoint for span metrics scraping.
          metric_relabel_configs:
            - source_labels: [span_kind]
              regex: SPAN_KIND_SERVER
              action: keep  # Keep only server spans.
            - source_labels: [http_user_agent, request_header_user_agent, http_request_header_user_agent]
              regex: kube-probe/.*|Prometheus/.*|Gravitee.io/.*|ELB-HealthChecker/.*
              action: drop  # Drop metrics generated by probes or health checkers.
            - regex: http_user_agent|request_header_user_agent|http_request_header_user_agent
              action: labeldrop  # Remove specified labels.

  otlp/spanmetrics:  # Separate receiver for span metrics.
    protocols:
      grpc:
        endpoint: 0.0.0.0:12345  # gRPC endpoint for receiving span metrics.

exporters:
  # Exporters send processed telemetry data to external systems.

  prometheusremotewrite:
    endpoint: "http://prometheus:9090/api/v1/write"  # Export metrics to Prometheus.

  logging:
    logLevel: debug  # Log telemetry data for debugging.

  otlp/jaeger:
    endpoint: "jaeger:4317"  # Export traces to Jaeger.
    tls:
      insecure: true  # Disable TLS verification (for testing or internal use).

  prometheus/spanmetrics:
    endpoint: 0.0.0.0:9999  # Endpoint for exposing span metrics to Prometheus.
    metric_expiration: 75s  # Time to keep metrics before expiring them.

processors:
  # Processors transform telemetry data before exporting.

  batch:  # Batch processor to group data for efficient processing.

  tail_sampling:  # Sampling processor for traces.
    decision_wait: 45s  # Wait time for sampling decision.
    num_traces: 50000  # Maximum number of traces to sample.
    policies:
      - name: ignore-http-user-agent
        type: string_attribute
        string_attribute:
          key: http.user_agent
          values: [kube-probe/*, Prometheus/*, Gravitee.io/*, ELB-HealthChecker/*]
          enabled_regex_matching: true
          invert_match: true  # Include traces not matching these values.
      - name: sampling-50%
        type: probabilistic
        probabilistic:
          sampling_percentage: 50  # Sample 50% of traces.

  spanmetrics:  # Processor for creating span metrics.
    dimensions:
      - name: http.method
      - name: http.status_code
      - name: http.user_agent
      - name: request.header.user-agent
      - name: http.request.header-user-agent
    latency_histogram_buckets: [2ms, 10ms, 100ms, 1s, 10s]  # Define latency buckets.
    metrics_exporter: prometheus/spanmetrics  # Export processed metrics.

service:
  # Service defines the pipeline for processing telemetry data.

  telemetry:
    metrics:
      address: 0.0.0.0:8888  # Address to expose collector's own metrics.

  pipelines:
    metrics/spanmetrics:  # Pipeline for span metrics.
      receivers: [otlp/spanmetrics]
      exporters: [prometheus/spanmetrics]

    traces:  # Pipeline for trace data.
      receivers: [otlp]
      processors: [spanmetrics, tail_sampling, batch]
      exporters: [logging, otlp/jaeger]

    metrics:  # Pipeline for general metrics.
      receivers: [otlp, prometheus]
      processors: [batch]
      exporters: [logging, prometheusremotewrite]
